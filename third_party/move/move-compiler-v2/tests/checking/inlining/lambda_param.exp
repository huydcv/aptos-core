
Diagnostics:
error: Currently, a function-typed parameter to an inline function must be a literal lambda expression
  ┌─ tests/checking/inlining/lambda_param.move:7:15
  │
7 │     inline_apply(f, b)
  │                  ^

error: Currently, a function-typed parameter to an inline function must be a literal lambda expression
   ┌─ tests/checking/inlining/lambda_param.move:11:16
   │
11 │     inline_apply4(f, b)
   │                   ^

// -- Model dump before bytecode pipeline
module 0x42::LambdaParam {
    private fun test_lambda_symbol_param1() {
        {
          let a: u64 = {
            let (b: u64) = Tuple(3);
            {
              let (f: |u64|u64, b: u64) = Tuple(f, b);
              {
                let (x: u64) = Tuple(b);
                x
              }
            }
          };
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
    private fun test_lambda_symbol_param2() {
        {
          let a: u64 = {
            let (b: u64) = Tuple(3);
            {
              let (f: |u64|u64, b: u64) = Tuple(f, b);
              {
                let (x: u64) = Tuple(b);
                x
              }
            }
          };
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          {
            let b: u64 = {
              let (b: u64) = Tuple(3);
              {
                let (x: u64) = Tuple(b);
                x
              }
            };
            if Eq<u64>(b, 3) {
              Tuple()
            } else {
              Abort(0)
            };
            {
              let b: u64 = {
                let (b: u64) = Tuple(3);
                {
                  let (_f: |u64|u64, b: u64) = Tuple(f, b);
                  b
                }
              };
              if Eq<u64>(b, 3) {
                Tuple()
              } else {
                Abort(0)
              };
              Tuple()
            }
          }
        }
    }
    spec fun $inline_apply(f: |u64|u64,b: u64): u64 {
        (f)(b)
    }
    spec fun $inline_apply2(f: |u64|u64,b: u64): u64 {
        LambdaParam::$inline_apply(f, b)
    }
    spec fun $inline_apply3(f: |u64|u64,b: u64): u64 {
        LambdaParam::$inline_apply4(f, b)
    }
    spec fun $inline_apply4(_f: |u64|u64,b: u64): u64 {
        b
    }
    spec fun $test_lambda_symbol_param1() {
        {
          let a: u64 = LambdaParam::$inline_apply2(|x: u64| x, 3);
          Tuple()
        }
    }
    spec fun $test_lambda_symbol_param2() {
        {
          let a: u64 = LambdaParam::$inline_apply2(|x: u64| x, 3);
          {
            let b: u64 = LambdaParam::$inline_apply(|x: u64| x, 3);
            {
              let b: u64 = LambdaParam::$inline_apply3(|x: u64| x, 3);
              Tuple()
            }
          }
        }
    }
} // end 0x42::LambdaParam
