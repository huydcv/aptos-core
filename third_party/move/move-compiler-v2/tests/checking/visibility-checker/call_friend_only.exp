
Diagnostics:
error: function `0xdeadbeef::M::bar` cannot be called from function `0xdeadbeef::Q::calls_bar` because module `0xdeadbeef::Q` is not a `friend` of `0xdeadbeef::M`
   ┌─ tests/checking/visibility-checker/call_friend_only.move:9:24
   │
 9 │     public(friend) fun bar(): u64 { foo() }
   │                        ^^^ callee
   ·
46 │         M::id(5) + bar()
   │                    ----- called here

error: function `0xdeadbeef::M::id` cannot be called from function `0xdeadbeef::Q::calls_bar` because module `0xdeadbeef::Q` is not a `friend` of `0xdeadbeef::M`
   ┌─ tests/checking/visibility-checker/call_friend_only.move:10:24
   │
10 │     public(friend) fun id<T>(x: T): T { x  }
   │                        ^^ callee
   ·
46 │         M::id(5) + bar()
   │         -------- called here

// -- Model dump before bytecode pipeline
module 0xdeadbeef::M {
    use 0xdeadbeef::O as OO;
    use 0xdeadbeef::P;
    friend fun bar(): u64 {
        M::foo()
    }
    private fun foo(): u64 {
        1
    }
    friend fun id<T>(x: #0): #0 {
        x
    }
    spec fun $bar(): u64 {
        M::$foo()
    }
    spec fun $foo(): u64 {
        1
    }
    spec fun $id<T>(x: #0): #0 {
        x
    }
} // end 0xdeadbeef::M
module 0xdeadbeef::N {
    private fun foo(): u64 {
        2
    }
    private fun calls_bar(): u64 {
        Add<u64>(M::bar(), M::id<u64>(N::foo()))
    }
    spec fun $calls_bar(): u64 {
        Add(M::$bar(), M::$id<u64>(N::$foo()))
    }
    spec fun $foo(): u64 {
        2
    }
} // end 0xdeadbeef::N
module 0xdeadbeef::O {
    use 0xdeadbeef::M as MM; // resolved as: 0xdeadbeef::M
    use 0xdeadbeef::M::{bar}; // resolved as: 0xdeadbeef::M
    use 0xdeadbeef::M::{bar as mbar}; // resolved as: 0xdeadbeef::M
    private fun foo(): u64 {
        3
    }
    private fun calls_bar(): u64 {
        Add<u64>(Add<u64>(Add<u64>(M::bar(), M::id<u64>(O::foo())), M::bar()), M::bar())
    }
    spec fun $calls_bar(): u64 {
        Add(Add(Add(M::$bar(), M::$id<u64>(O::$foo())), M::$bar()), M::$bar())
    }
    spec fun $foo(): u64 {
        3
    }
} // end 0xdeadbeef::O
module 0xdeadbeef::P {
    use 0xdeadbeef::M; // resolved as: 0xdeadbeef::M
    private fun calls_bar(): u64 {
        Add<u64>(Add<u64>(M::bar(), M::id<u64>(P::my_foo())), M::bar())
    }
    private fun my_foo(): u64 {
        4
    }
    spec fun $calls_bar(): u64 {
        Add(Add(M::$bar(), M::$id<u64>(P::$my_foo())), M::$bar())
    }
    spec fun $my_foo(): u64 {
        4
    }
} // end 0xdeadbeef::P
module 0xdeadbeef::Q {
    use 0xdeadbeef::M::{Self, bar}; // resolved as: 0xdeadbeef::M
    private fun calls_bar(): u64 {
        Add<u64>(M::id<u64>(5), M::bar())
    }
    spec fun $calls_bar(): u64 {
        Add(M::$id<u256>(5), M::$bar())
    }
} // end 0xdeadbeef::Q
