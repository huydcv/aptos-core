
Diagnostics:
error: function `0x2::X::f_private` cannot be called from function `0x2::M::f_friend_call_private_1` because it is private to module `0x2::X`
   ┌─ tests/checking/visibility-checker/module_call_visibility_friend_invalid.move:4:9
   │
 4 │     fun f_private() {}
   │         ^^^^^^^^^ callee
   ·
22 │     public(friend) fun f_friend_call_private_1() { X::f_private() }
   │                                                    -------------- called here

error: function `0x2::X::f_friend` cannot be called from function `0x2::M::f_friend_call_friend` because module `0x2::M` is not a `friend` of `0x2::X`
   ┌─ tests/checking/visibility-checker/module_call_visibility_friend_invalid.move:5:24
   │
 5 │     public(friend) fun f_friend() {}
   │                        ^^^^^^^^ callee
   ·
18 │     public(friend) fun f_friend_call_friend() { X::f_friend() }
   │                                                 ------------- called here

error: function `0x2::Y::f_private` cannot be called from function `0x2::M::f_friend_call_private_2` because it is private to module `0x2::Y`
   ┌─ tests/checking/visibility-checker/module_call_visibility_friend_invalid.move:10:9
   │
10 │     fun f_private() {}
   │         ^^^^^^^^^ callee
   ·
23 │     public(friend) fun f_friend_call_private_2() { Y::f_private() }
   │                                                    -------------- called here

// -- Model dump before bytecode pipeline
module 0x2::Y {
    private fun f_private() {
        Tuple()
    }
    spec fun $f_private() {
        Tuple()
    }
} // end 0x2::Y
module 0x2::X {
    private fun f_private() {
        Tuple()
    }
    friend fun f_friend() {
        Tuple()
    }
    spec fun $f_friend() {
        Tuple()
    }
    spec fun $f_private() {
        Tuple()
    }
} // end 0x2::X
module 0x2::M {
    use 0x2::X; // resolved as: 0x2::X
    use 0x2::Y; // resolved as: 0x2::Y
    friend fun f_friend_call_friend() {
        X::f_friend()
    }
    friend fun f_friend_call_private_1() {
        X::f_private()
    }
    friend fun f_friend_call_private_2() {
        Y::f_private()
    }
    spec fun $f_friend_call_friend() {
        X::$f_friend()
    }
    spec fun $f_friend_call_private_1() {
        X::$f_private()
    }
    spec fun $f_friend_call_private_2() {
        Y::$f_private()
    }
} // end 0x2::M
